[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "generative-ai-course"
version = "1.0.0"
description = "A comprehensive course on Generative AI and Automation"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Course Team", email = "course@example.com"}
]
keywords = ["ai", "machine-learning", "generative-ai", "education"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "tensorflow>=2.8.0",
    "torch>=1.12.0",
    "transformers>=4.20.0",
    "openai>=0.27.0",
    "langchain>=0.0.200",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.20.0",
    "pip-audit>=1.4.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "jupyterlab>=3.4.0",
    "nbformat>=5.4.0",
    "nbconvert>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/NERD-Community-Ethiopia/generative-ai-course"
Documentation = "https://github.com/NERD-Community-Ethiopia/generative-ai-course/wiki"
Repository = "https://github.com/NERD-Community-Ethiopia/generative-ai-course.git"
Issues = "https://github.com/NERD-Community-Ethiopia/generative-ai-course/issues"
Discussions = "https://github.com/NERD-Community-Ethiopia/generative-ai-course/discussions"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "scripts*", "student-submissions*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | student-submissions
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "student-submissions",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "torch.*",
    "transformers.*",
    "openai.*",
    "langchain.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--junitxml=test-results.xml",
    "--html=test-report.html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/student-submissions/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "student-submissions"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
full-report = true

[tool.pre-commit]
repos = [
    { repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.4.0", hooks = [
        { id = "trailing-whitespace" },
        { id = "end-of-file-fixer" },
        { id = "check-yaml" },
        { id = "check-added-large-files" },
        { id = "check-merge-conflict" },
    ] },
    { repo = "https://github.com/psf/black", rev = "23.3.0", hooks = [
        { id = "black", language_version = "python3" },
    ] },
    { repo = "https://github.com/pycqa/flake8", rev = "6.0.0", hooks = [
        { id = "flake8" },
    ] },
    { repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.3.0", hooks = [
        { id = "mypy", additional_dependencies = ["types-all"] },
    ] },
    { repo = "https://github.com/PyCQA/bandit", rev = "1.7.5", hooks = [
        { id = "bandit", args = ["-r", "."] },
    ] },
] 